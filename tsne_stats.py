# -*- coding: utf-8 -*-
"""tsne_stats.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tosz6UY3e6d5Hm2babUiwuvY8mxWwNWI
"""

!pip install torch torchvision scikit-learn matplotlib tqdm

!pip install fairseq

!pip install torchmetrics

import numpy as np
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from text_encoders import RoBERTaEncoder
from datasets import SpamDataset
import torch
from tqdm import tqdm

encoder.load_weights('baseline_spam_roberta.pt')

encoded_features = []
time_bins = []
spam_label = []

i=0
for i in range(5):
  for data in tqdm(spam_dataset_splits[i]):
      message = data['Message']
      spam_label.append(data['Spam/Ham'])
      feature_vector = encoder.encode_text(message).squeeze().detach().cpu().numpy()
      encoded_features.append(feature_vector)
      time_bins.append(i)
  i=i+1

encoded_features = np.array(encoded_features)

encoded_features_spam = encoded_features[np.array(spam_label) == 1]
time_bins_spam = np.array(time_bins)[np.array(spam_label) == 1]

tsne = TSNE(n_components=2, random_state=42, perplexity=5, learning_rate=100, n_iter=1500)
tsne_features = tsne.fit_transform(encoded_features_spam)

plt.figure(figsize=(10, 8))
scatter = plt.scatter(tsne_features[:, 0], tsne_features[:, 1], c=time_bins_spam, cmap='viridis')  # Using viridis colormap for time bins
plt.colorbar(scatter, label='Time Bin')
plt.title('t-SNE visualization of RoBERTa Features with Temporal Patterns in Spam')
plt.xlabel('t-SNE feature 1')
plt.ylabel('t-SNE feature 2')
plt.show()

from scipy.stats import mannwhitneyu

early_bins = [0,1,2]
late_bins = [3,4]

# Filter t-SNE features for early and late time periods
tsne_features_early = tsne_features[np.isin(time_bins_spam, early_bins)]
tsne_features_late = tsne_features[np.isin(time_bins_spam, late_bins)]
# Perform Mann-Whitney U test for both dimensions separately
u_statistic_dim1, p_value_dim1 = mannwhitneyu(tsne_features_early[:, 0], tsne_features_late[:, 0])
u_statistic_dim2, p_value_dim2 = mannwhitneyu(tsne_features_early[:, 1], tsne_features_late[:, 1])


print("Dimension 1:")
print("  U-statistic:", u_statistic_dim1)
print("  p-value:", p_value_dim1)
if p_value_dim1 < 0.05:
    print("  Significant difference (alpha = 0.05)")
else:
    print("  No significant difference (alpha = 0.05)")

print("\nDimension 2:")
print("  U-statistic:", u_statistic_dim2)
print("  p-value:", p_value_dim2)
if p_value_dim2 < 0.05:
    print("  Significant difference (alpha = 0.05)")
else:
    print("  No significant difference (alpha = 0.05)")

from scipy.stats import levene

# Perform Levene's test for each dimension separately
levene_dim1, p_value_dim1 = levene(tsne_features_early[:, 0], tsne_features_late[:, 0])
levene_dim2, p_value_dim2 = levene(tsne_features_early[:, 1], tsne_features_late[:, 1])


print("Dimension 1 - Levene's Test:")
print("  Levene's statistic:", levene_dim1)
print("  p-value:", p_value_dim1)

print("\nDimension 2 - Levene's Test:")
print("  Levene's statistic:", levene_dim2)
print("  p-value:", p_value_dim2)

from scipy.stats import shapiro

_, p_value_dim1_early = shapiro(tsne_features_early[:, 0])
_, p_value_dim2_early = shapiro(tsne_features_early[:, 1])
_, p_value_dim1_late = shapiro(tsne_features_late[:, 0])
_, p_value_dim2_late = shapiro(tsne_features_late[:, 1])

print("Dimension 1 - Early Time Period - Shapiro-Wilk Test:")
print("  p-value:", p_value_dim1_early)
print("Dimension 2 - Early Time Period - Shapiro-Wilk Test:")
print("  p-value:", p_value_dim2_early)
print("Dimension 1 - Late Time Period - Shapiro-Wilk Test:")
print("  p-value:", p_value_dim1_late)
print("Dimension 2 - Late Time Period - Shapiro-Wilk Test:")
print("  p-value:", p_value_dim2_late)

encoded_features = []
time_bins = []
spam_label = []

i=0
for i in range(5):
  for data in tqdm(ham_dataset_splits[i]):
      message = data['Message']
      spam_label.append(data['Spam/Ham'])
      feature_vector = encoder.encode_text(message).squeeze().detach().cpu().numpy()
      encoded_features.append(feature_vector)
      time_bins.append(i)
  i=i+1

encoded_features = np.array(encoded_features)

# Filter out only spam emails for t-SNE visualization
encoded_features_ham = encoded_features[np.array(spam_label) == 0]
time_bins_ham = np.array(time_bins)[np.array(spam_label) == 0]

tsne = TSNE(n_components=2, random_state=42, perplexity=5, learning_rate=100, n_iter=1500)
tsne_features = tsne.fit_transform(encoded_features_ham)

plt.figure(figsize=(10, 8))
scatter = plt.scatter(tsne_features[:, 0], tsne_features[:, 1], c=time_bins_ham, cmap='viridis')  # Using viridis colormap for time bins
plt.colorbar(scatter, label='Time Bin')
plt.title('t-SNE visualization of RoBERTa Features with Temporal Patterns in Ham')
plt.xlabel('t-SNE feature 1')
plt.ylabel('t-SNE feature 2')
plt.show()

from scipy.stats import mannwhitneyu

tsne = TSNE(n_components=2, random_state=42, perplexity=5, learning_rate=100, n_iter=1500)
tsne_features = tsne.fit_transform(encoded_features_ham)
early_bins = [0,1,2]
late_bins = [3,4]

# Filter t-SNE features for early and late time periods
tsne_features_early = tsne_features[np.isin(time_bins_ham, early_bins)]
tsne_features_late = tsne_features[np.isin(time_bins_ham, late_bins)]
# Perform Mann-Whitney U test for both dimensions separately
u_statistic_dim1, p_value_dim1 = mannwhitneyu(tsne_features_early[:, 0], tsne_features_late[:, 0])
u_statistic_dim2, p_value_dim2 = mannwhitneyu(tsne_features_early[:, 1], tsne_features_late[:, 1])


print("Dimension 1:")
print("  U-statistic:", u_statistic_dim1)
print("  p-value:", p_value_dim1)
if p_value_dim1 < 0.05:
    print("  Significant difference (alpha = 0.05)")
else:
    print("  No significant difference (alpha = 0.05)")

print("\nDimension 2:")
print("  U-statistic:", u_statistic_dim2)
print("  p-value:", p_value_dim2)
if p_value_dim2 < 0.05:
    print("  Significant difference (alpha = 0.05)")
else:
    print("  No significant difference (alpha = 0.05)")

from scipy.stats import levene

# Perform Levene's test for each dimension separately
levene_dim1, p_value_dim1 = levene(tsne_features_early[:, 0], tsne_features_late[:, 0])
levene_dim2, p_value_dim2 = levene(tsne_features_early[:, 1], tsne_features_late[:, 1])


print("Dimension 1 - Levene's Test:")
print("  Levene's statistic:", levene_dim1)
print("  p-value:", p_value_dim1)

print("\nDimension 2 - Levene's Test:")
print("  Levene's statistic:", levene_dim2)
print("  p-value:", p_value_dim2)

from scipy.stats import shapiro

_, p_value_dim1_early = shapiro(tsne_features_early[:, 0])
_, p_value_dim2_early = shapiro(tsne_features_early[:, 1])
_, p_value_dim1_late = shapiro(tsne_features_late[:, 0])
_, p_value_dim2_late = shapiro(tsne_features_late[:, 1])

print("Dimension 1 - Early Time Period - Shapiro-Wilk Test:")
print("  p-value:", p_value_dim1_early)
print("Dimension 2 - Early Time Period - Shapiro-Wilk Test:")
print("  p-value:", p_value_dim2_early)
print("Dimension 1 - Late Time Period - Shapiro-Wilk Test:")
print("  p-value:", p_value_dim1_late)
print("Dimension 2 - Late Time Period - Shapiro-Wilk Test:")
print("  p-value:", p_value_dim2_late)